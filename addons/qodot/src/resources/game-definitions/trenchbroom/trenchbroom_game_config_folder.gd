class_name TrenchBroomGameConfigFolder
extends Resource
tool

## A node used to to express a set of entity definitions that can be exproted

## Button to export new folder to the Trenchbroom Games Folder
export(bool) var export_file : bool setget set_export_file

## Location of new game configuration folder + files, points to user's Trenchbroom installation or AppData
export(String, DIR, GLOBAL) var trenchbroom_games_folder : String

## Name of the game in Trenchbroom's game list
export(String) var game_name := "Qodot"
## Icon for Trenchbroom's game list
export(Texture) var icon : Texture
## Abstracted resource, bringing this to this resource in the refactor
export(Resource) var game_config_file : Resource = preload("res://addons/qodot/game_definitions/trenchbroom/qodot_trenchbroom_config_file.tres")
## List of FGDs to include in the game configuration
export(Array, Resource) var fgd_files : Array = [
	preload("res://addons/qodot/game_definitions/fgd/qodot_fgd.tres")
]

func _init() -> void:
	## If no icon is set, use icon.png, an icon must be present when Trenchbroom reads the game definition
	if not icon:
		if ResourceLoader.exists("res://icon.png"):
			icon = ResourceLoader.load("res://icon.png")

## Exports folder and files to Trenchbroom games folder
func set_export_file(new_export_file : bool = true) -> void:
	# When button is pressed
	if new_export_file != export_file:
		# When not in editor
		if Engine.is_editor_hint():
			# If no folder location is defined, return
			if not trenchbroom_games_folder:
				print("Skipping export: No TrenchBroom games folder")
				return
			# Create config folder name by combining games folder with the game name as a directory
			var config_folder = trenchbroom_games_folder + "/" + game_name
			var config_dir = Directory.new()
			var err = config_dir.open(config_folder)
			if err != OK:
				## create_config_directory()
				print("Couldn't open directory, creating...")
				# Check that it was possible to make this directory in the target location
				err = config_dir.make_dir(config_folder)
				if err != OK:
					# Bug: no alternate path to create (like appdata) is checked, no error flagged, user OS could be checked for this
					print("Skipping export: Failed to create directory")
					return

			# If there is no config file loaded, return
			if not game_config_file:
				print("Skipping export: No game config file")
				return
				
			# If there is no FGD loaded, return
			if fgd_files.size() == 0:
				# Todo: check if a config can have no FGD at all
				print("Skipping export: No FGD files")
				return
			
			# If all goes smoothly...
			# add_config_files()
			print("Exporting TrenchBroom Game Config Folder to ", config_folder)
			
			# Icon
			var icon_path : String = config_folder + "/Icon.png"
			print("Exporting icon to ", icon_path)
			var export_icon : Image = icon.get_data()
			export_icon.resize(32, 32, Image.INTERPOLATE_LANCZOS)
			export_icon.save_png(icon_path)
	
			# Config file, duplicated for safety
			var export_config_file: TrenchBroomGameConfigFile = game_config_file.duplicate()
			# Property set by config folder
			export_config_file.game_name = game_name
			# Property set by config folder
			export_config_file.target_file = config_folder + "/GameConfig.cfg"

			# Property set by config folder
			export_config_file.fgd_filenames = [] # This is generated by config folder, no reason to make this public/user's responsibility
			for fgd_file in self.fgd_files:
				export_config_file.fgd_filenames.append(fgd_file.fgd_name + ".fgd")
			
			# This is where we need to pull the set export file functionality from config file to config folder
			export_config_file.set_export_file(true)
			# export_game_config_file()
			for fgd_file in fgd_files:
				if not fgd_file is QodotFGDFile:
					print("Skipping %s: Not a valid FGD file" % [fgd_file])

				var export_fgd : QodotFGDFile = fgd_file.duplicate()
				export_fgd.target_folder = config_folder
				export_fgd.set_export_file(true)

			print("Export complete\n")

func build_class_text() -> String:
	return ""
